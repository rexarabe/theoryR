1. Початок роботи з системою R.

R - це середовище програмування для статистичного аналізу даних.
Це середовище складається з базової програми R, що працює як інтепретатор мови статистичного програмування S, та окремих пакетів, які реалізують спеціальні методи та технології статистичної обробки даних.
Базова програма створена у рамках проекту GNU, як альтернативна програма у Bell Laboratories під керівництвом Дж. Чемберса).
На відміну від S+, програма R є некомерцйною і вільно розповсюджується за умови дотримання вимог GNU General Public License.
Офіційна стронінка проекту R: http://www.r-project.org/

Отримати останню версію інсталятора базової программи R Для операційної системи Windows можна за адресою: https:cran.r-project.org/

Інсталятор завантажується у вигляді ехе. Для інсталяції програми досить запустили цей файл і відповідати на його запитання.
При першій спробі роботи з R рекомендовано погоджуватись з усіма пропозиціями, які робить інсталятор.
Проблеми можуть виникнути, якщо на вашому комп'ютері встановлені різні права доступу для різних кокористувачів.
Спара в тому, що R шарикінці кожної сесії роботи зберігає на диску "робочий простір"(workspace) - сукупність даних та програми, які були завантажені під час сесії.
На початку наступної сесії workspace  завантажується з диску.
Якщо під час інсталяції для зберігання workspace буде обрано директорію, недоступну певному користувачеві, то при роботі з R можуть виникати повідомлень потрібно або вибрати директорію вільного доступу при інсталяції, або змінити директорію, використовуючи пункт
 File-> ChangeDir... у головному меню головного вікна програми R.

 Після інсталяції R його можна запустили і отримати приблизно таке вікно:

 Тут вгорі знаходиться головне меню, а нижче відкрито вікно "консолі R", в якій можна давати інструкцій програмі та отримувати її відповід.
 Синім кольором у цьому вікні виведено початкову інформацію про ващу версію базовоїї програми R.
 Далі вказана інструкція, яку R виконав автоматично при завантаженні.
 Нарешті, червоний символ > є запрошенням користувачу вводити власні інструкції.
 R виводить результати виконання безпосердньо після інструкції синім кольором, після чого переходить у режим очікування наступної ніструкції, про що повідомляє червоним знаком >.
 При роботі з R можна виконувати одразу багато інструкцій, що записані в окремому файлі.
 Найпростіший спосіб зробити це - завантажити такий файл в якому-небудь текстовому редакторі, зробити там copy, а потім - paste на консолі.
 При цьому, якщо інструкції у файлі роміщені у окремих рядочках, розділових знаків між ними не потрібно.
 Інструкції, вміщені в одному рядочку, розіляють символом;. Якщо довга інструкція не вміщується у одному рядочку, її можна розбити на декілька рядочків, причому, при переході до наступного рядочкку R автоматично виводить символ продовження +
 R  сам згогадується, що інструкція не закінчена за її синтаксисом.
 Тому деякі синтаксичні помилки ( як от - забуті дужки ) можуть спийматись як незакінчені інструкції.
 У цьому випадку R виставить + на початку наступного рядочка і перейде у режим очікування.
 Натисніть escapce, щоб перейти у режим введен нової інструкції без продовження аналізу попередньої.
 Програми, що складаються з інструкцій R, називають скриптами (script).
 Вони мають стандартне розширення. r.
 У базовій пограмі є мождивість відкрити вікно редактора для створення нового скрипту, або завантажити файл зі скриптом, використовуючи пункти головно меню
 File->Newscript або File->Openscript.
 Виконати завантажений у вікні редактора скрипт повністю можна використовуючи edit->Runall.
  Можна також виконати віділену частину скрипту, використовуючи кнрпку (Run line or selection)
  Закінчивши роботу зі скриптом, його можна зберегти, використовуючи File->Save.
  Однак, редактор скриптів, реалізований, у R, має дуже обмежену функціональність.
Базова програма R є лише інтерпретатором одного з діалектів мови програмування S.
Конкретні статистичні алгоритми, як правило, виконуються у вигляді скриптів на цій мові і зібрані у пакети (packages) R.
При інсталяцій разом з базовою програмою інсталюються і основні пакети, які реалізують найбільш популярні технології статистичної обробки.
Частина цих пакетів автоматично завантажується при запуску R.
Ті пакети, які не завантажилисль автоматично, але інстальовані на компʼютері, можна завантажити функцією library:

>library(splines)

завантажує пакет splines? призначений для роботи зі сплайнами.
Ця ж функція, викликана без параметрів, дає перелік усіх завантажениї пакетів з коротким поясненням їх функцій.
Якщо потрбний пакет не було інстальовано на компʼютері, його можна завантажити з нітернет-архіву, використовуючи пункти головного меню.
Packages->Installpackage(s).
Спочатку програма пропонує вибрати інтернет-архів, з якого робиться інсталяція.
Варіант 0-cloud, що пропонується за умовчанням, як правило, працює цілком задовльно.
Після цього треба у списку вибрати потрібний для вас пакет.
Якщо цей пакет використовує які-небудь інші, котрих немає на вашому компʼютері, вони будуть інсталятьовані автоматично.


Скриптовое окно
Данная область просто незаменима при написании собственных алгоритвом команд, называемых скриптами или скиптовыми программими.
Я рекомендую все команды писать именно с скриптовом окне и лишь потом переводить их в консольШ для этоо воспользуйтесь комбинацией клавиш CTRL+R)
На это есть две причины.
Во-первых, если Вы пользуететсь только консолью и совершили ошибку в пердыдущих командах, то Вам придется перезапустить все команды заново, что достаточно проблематично.\
Во-вторых, записав алгоритм команд в скриптовом окне, Вы можете сохранить его как скрипт (текстовый файл с разрешен)

dir() посмотреть списов файлов в тукущей директории

1. Робота з даними(найпростші операції і типи даних)

Для виконання певної операцій необхідно натснути клавішу Enter.
Якщо необхідно скопіювати команду, яку ви вже виконували раніше в цьому файлі, можна скористатись клавішами верх та вниз.

Длтя виклику help, що стосується певної команди, слід набрати  ? <<назва команди>>  і натиснути клавішу Enter; якщо вас цікавить опція, ане команда можна спробувати набрати ??назва_опцій
Коментарі відмічаються символом #

Як було сказано вище, зберігати робочий файл рекомендується, скопіювавши його в Блокноті, в текстовому файлі.
 R пропонує збереження лише значень змінних.

1. Робота за даними(Найпростіші операції і типи даних)

Для виконання операцій необхідно натиснути клавішу Enter.
Якщо необхыдно скопыювати команду, яку ви вже виконували раніге в цьюму файлі, можна скористатиьс клавішами верх и вниз.

Для виклику help, що стосуэться певноъ команди, слыд набрати
?назва_команди і натиснути клавішу Enter; якщо вас цікавить опція, а не команда, можна спробувати набрати
??назва_опціі.
Коментарі відмічаються символом #.

Як було сказано вище зберыгати робочий файл рекомендуэться скопыювавши його в Блокноты, в текстовому файлі.
R пропонує збереження лише значень змінних.

1) Арифметичні операції в R.
Вони позначаються звичайним чином: +, -, *, /, ^.
> (7*3)+12/2-7^2
[1] -22

Також є в наявності елементарні функції: log(), log10(), exp(), sin(), cos(), tan(), sqrt(), а також abs().
Функція(x,n) округлює число до n десяткових знаків після коми.

Логічні операції.
Це операції <,>, <= (менше або дорынює); >= (більше або дорівнює); = (дорівнює); != (не дорівнює); ? (переріз); | (об'єднання).

2) Присвоєння значення обʼєктам традиційно здійснюється за допомогою символу <-. також використовуэться знак = .

> variable1<-7
> variable1+2
[1] 9

3) Статистичні опепації:
mean(x)- обчислює вибіркове середнє масиву x;
sd(x) обчислює вибіркове сердньокварадтичне відхилення x;
var(x) обчислюэ вибыркову дисперсію масиву x;
summary(x) виводить елементи дескриптивної статистики масиву x^ минімальне значення, максимальне, обидві квартилі, медіану і середнє.
range(x) повертаэ найбыльше ы найменще значення в x.
Якщо нас цікавить різниця між найбільшим і найменшим і найменшим значеннями, можна скористатись функцією diff(range(x)).
Тут 1:10 означає послідовність цілих чисел від 1 до 10, як і в мові С, наприклад.
> range(1:10)
[1]  1 10
> diff(range(0:10))
[1] 10
> diff(range(1:10))
[1] 9

cor(x,y) обчислюэ коэфіцієнт корелації Пірсона між масивами x і у однакової довжини.
Якщо x - матриця, то команда cor(x,x) вижає матрицю кореляцій даних.

Для обрахування коефіцієнта кореляції Спірмена необхідно в тій Самій команді задати додаткову опцію method.
Операція c() задає вектор,Ю заисуючи його в змінну x/

> x<-c(-100,0,11)
> y<-c(134,2,-6)
> cor(x,y)
[1] -0.9992336

4) Вектор - це один з можливих типів даних. Створюємо вектор за допомогою операції c(). для зберыгання величин 1.5; 2; і 3 у векторі x друкуємо
> x<-c(1.5,2,3)
> x
[1] 1.5 2.0 3.0

У вектор можна помістити дані інших типів.
Наприклад, текстові:

> y<-c("A", "Hello", "world!")
> y
[1] "A"      "Hello"  "world!"

Можна з'єднати 2 вектори в одну структуру з двох стовпчиків.
Для цього використовують команду cbind().

> x<-c(2,3,4,1)
> y<-c(1,1,1,10)
> cbind(x,y)
     x  y
[1,] 2  1
[2,] 3  1
[3,] 4  1
[4,] 1 10

Обʼєднання двох рядків в одну структуру здійснюється за допомогою rbin()
> rbind(x,y)
  [,1] [,2] [,3] [,4]
  x    2    3    4    1
  y    1    1    1   10

Операції додавання, різниці, множення векторів відбуваються поелементно.
Якщо ж вектори, що, наприклад, додаються, мають різні довжини, то коротший вектор "циклічно" продовжується до розміру довгого, і після цього проводиться додавання поеленментно.

5) Послідовності.
Команда seq() створюэ послыдовнысть чисел.

Її часто використовують при графічному аналізі.
Три аргументи, які зазвичай використовують в команді: початкове значення, кінцеве і крок (приріст).
Якщо ж приріст = 1, то достатньо двох аргументів.

Приклад. Створимо послідовність чисел від 0.0 до 1.0 з кроком 0.2.
А потім від 0 до 8 з одиничним кроком.

> seq(0,1,0.2);
[1] 0.0 0.2 0.4 0.6 0.8 1.0
> seq(0,8)
[1] 0 1 2 3 4 5 6 7 8

Для стислого запису послідовності цілих від 0 до 8 можна скористатись діапазоном
> 0:8
[1] 0 1 2 3 4 5 6 7 8

Для повторення в послідовності n  разів однакових чисел або симоволів використовують команду rep(a,n)
> rep(c(0,"x"),3)
[1] "0" "x" "0" "x" "0" "x"

Також можна ругулювати довжину послідовності
> rep(c(1,2,3), length=10)
 [1] 1 2 3 1 2 3 1 2 3 1
> rep(c(1,2,3), 10)

Відмітимо, що пакет R використовує круглі дужки () для аргументів функцій і квадратні [] для того, щоб звернутись до конкретного елемента в послідовності, векторі, масиві, списку.

Створимо масив чисел

> t<-c(2,3,-1,77,128,3)

Викличемо другу комаоненту вектора.
> t[2]
[1] 3

А теперь з другої по четверту:
> t[2:4]
[1]  3 -1 77

І окремо вилучимо 1-шу, 4-ту, 6-ту компоненти.
> > t<-c(2,3,-1,77,128,3)
> t[c(1,4,6)]
[1]  2 77  3

За допомогою логічних операцій можна, записавши їх в квадратних дужках, "виудити"







6)Списки. Список - це структура, тобто вектор, елементи якого можуть мати різні типи: числові, тексові і т.д. Елементом списку може бути інший список. Списки створюються за домопогою команди list().
Тут ми створюэмо список student з чотирма полями.


7)Матриці.
В матриці дані розташовані в рядках і стовпчиках прямокутної таблиці.
Приклад.
Розглядемо матрицю

Створити таку матрицю в R можна за допомогою команди matrix().
Присвоїмо ій імʼя b.data.
Якщо ми хочемо, щоб дані записувались в матрицю по рядках, використовуємо опцію byrow=TRUE.
В даному прикладі опція nrow=3 показує кількість рядків матриці.

1) Створимо матрицю
> Data<-c(190,8,22,191,4,1.7,223,80,2)
> b.data<-matrix(Data, nrow=3, byrow=TRUE)
> b.data
     [,1] [,2] [,3]
[1,]  190    8 22.0
[2,]  191    4  1.7
[3,]  223   80  2.0

2) Для визначення розмірності матриці можна надрукувати:
> dim(b.data)
[1] 3 3

3) Подивимось, як можна надписати рядки або стовчики матриці.
Для цього використаємо команду dimnames().
> region<-c("East","Middle","West")
> dimnames(b.data)<-list(region, NULL)
> b.data
       [,1] [,2] [,3]
East    190    8 22.0
Middle  191    4  1.7
West    223   80  2.0


> type<-c("type A", "type B", "type C")
> dimnames(b.data)<-list(NULL,type)
> b.data
     type A type B type C
[1,]    190      8   22.0
[2,]    191      4    1.7
[3,]    223     80    2.0

> dimnames(b.data)<-list(region,type)
> b.data
       type A type B type C
East      190      8   22.0
Middle    191      4    1.7
West      223     80    2.0

4)
5) Додавння матриць A+B відбувається поелементно.
Множення A*B також - поелементно.
Якщо матрицы мають рызну розмырнысть, то операція не виконується.
6) Операція множення матриць - в матетичному сенсі - виглядає як A%*%B.
Наприклад,

